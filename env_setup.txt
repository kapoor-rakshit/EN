
For SETUP refer "SetUpinstructions.docx"
----------------------------------------



NOTE :  AngularJS is for building CLIENT-side web applications
----    NodeJs is used to build SERVER-side applications
        expressJs is a NodeJs framework to build websites / web services using principles and approaches of node.js.
        
        
        
NodeJs  vs  Java
-----------------
REFERENCE : https://www.infoworld.com/article/2883328/node-js/java-vs-nodejs-an-epic-battle-for-developer-mindshare.html

 As JavaScript finds a home on the server and in the browser (Client) as well.
 Use of JavaScript for both sides of the client/server than to write something in Java and again in JavaScript.

 Complicated build tools like Ant and Maven in Java programming.
 which involves switching from Java to XML.
 
 Many web services and databases return data in JSON, a natural part of JavaScript.
 JSON parsers are available as Java libraries. But in JavaScript we don’t need libraries for same.
 
 

EVENT Loop in NodeJs    (Refer Screenshot)
-------------------------------------------



CALLBACKs
---------
callbacks are used for async code execution.

PROMISEs
---------
It is fair to say promises are just syntactic sugar.
Everything you can do with promises you can do with callbacks.
The deep reason why promises are often better is that they're more composeable, 
which roughly means that combining multiple promises "just works", while combining multiple callbacks often doesn't.
For instance, it's trivial to assign a promise to a variable and attach additional handlers to it later on,
or even attach a handler to a large group of promises that gets executed only after all the promises resolve.
While you can sort of emulate these things with callbacks, it takes a lot more code, is very hard to do correctly,
and the end result is usually far less maintainable.

OBSERVABLEs
------------
Both Promises and Observables will help us work with the asynchronous functionalities in JavaScript.
They are very similar in many cases, however, there are still some differences between the two as well,
promises are values that will resolve in asynchronous ways like http calls. 
On the other hand, observables deal with a sequence of asynchronous events.

The main differences between them are listed below:
Promise
--------
 having one pipeline
 usually only use with async data return
 not easy to cancel

Observable
-----------
 are cancellable
 are retriable by nature such as retry and retryWhen
 stream data in multiple pipelines
 having array-like operations like map, filter, forEach.. etc
 can be created from other sources like events
 they are functions, which could be subscribed later on


Async / Await
--------------
REFERENCE : https://www.geeksforgeeks.org/using-async-await-in-node-js/
------------------------------------------------------------------------
With Node v8, the async/await feature was officially rolled out by the Node to deal with Promises and function chaining.
The functions need not to be chained one after another, simply await the function that returns the Promise.
But the function async needs to be declared before awaiting a function returning a Promise.

Example:
async function fun1(req, res){
  let response = await request.get('http://localhost:3000');
    if (response.err) { console.log('error');}
    else { console.log('fetched response');
}

The code above basically asks the javascript engine running the code to wait for the request.get() function to complete
before moving on to the next line to execute it.
The request.get() function returns a Promise for which user will await.
Code writing and understanding becomes easy with async/await.


REFERENCE : https://medium.com/velotio-perspectives/understanding-node-js-async-flows-parallel-serial-waterfall-and-queues-6f9c4badbc17
----------------------------------------------------------------------------------------------------------------------------------------
1. Async.parallel
------------------
When we have to run multiple tasks independent of each other without waiting until the previous task has completed,
parallel comes into the picture.

  Syntax   : async.parallel(tasks, callback)
> tasks    : A collection of functions to run. It can be an array, an object or any iterable.
> callback : This is the callback where all the task results are passed and executed once all the task execution has completed.

In case an error is passed to a function’s callback, the main callback is immediately called with the error.
Although parallel is about starting I/O tasks in parallel, 
it’s not about parallel execution since Javascript is single-threaded.

Example:
// 1
async.parallel([
  function(callback) {
    setTimeout(function() {
      console.log('Task One');
      callback(null, 1);
    }, 200);
  },
  function(callback) {
    setTimeout(function() {
      console.log('Task Two');
      callback(null, 2);
    }, 100);
  }
],
function(err, results) {      // the results array will equal [1, 2] even though
                              // the second function had a shorter timeout.
  console.log(results);
});

// 2 , an example using an object instead of an array
async.parallel({
  task1: function(callback) {
    setTimeout(function() {
      console.log('Task One');
      callback(null, 1);
    }, 200);
  },
  task2: function(callback) {
    setTimeout(function() {
      console.log('Task Two');
      callback(null, 2);
    }, 100);
    }
}, function(err, results) {      // results now equals to: { task1: 1, task2: 2 }
  console.log(results);
});


2. Async.series
----------------
When we have to run multiple tasks which depend on the output of the previous task, series comes to our rescue.

  Syntax : async.series(tasks, callback)
  
The callback function receives an array of result objects when all the tasks have completed.
If an error is encountered in any of the tasks, 
no more functions are run but the final callback is called with the error value.

Example:
// 1
async.series([
  function(callback) {
    console.log('one');
    callback(null, 1);
  },
  function(callback) {
    console.log('two');
    callback(null, 2);
  },
  function(callback) {
    console.log('three');
    callback(null, 3);
  }
],
function(err, results) {              // results is now equal to [1, 2, 3]
  console.log(result);
});

// 2
async.series({
  1: function(callback) {
    setTimeout(function() {
      console.log('Task 1');
      callback(null, 'one');
    }, 200);
  },
  2: function(callback) {
    setTimeout(function() {
      console.log('Task 2');
      callback(null, 'two');
    }, 300);
  },
  3: function(callback) {
    setTimeout(function() {
      console.log('Task 3');
      callback(null, 'three');
    }, 100);
  }
},
function(err, results) {             // results is now equal to: { 1: 'one', 2: 'two', 3:'three' }
  console.log(results);
});


3. Async.waterfall
-------------------
When we have to run multiple tasks which depend on the output of the previous task, Waterfall can be helpful.
The only difference between Waterfall and Series async utility is that 
the final callback in series receives an array of results of all the task whereas, 
in Waterfall, the result object of the final task is received by the final callback.

  Syntax : async.waterfall(tasks, callback)
  
It will run one function at a time and pass the result of the previous function to the next one.

Example:
// 1
async.waterfall([
  function(callback) {
    callback(null, 'Task 1', 'Task 2');
  },
  function(arg1, arg2, callback) {
                                                  // arg1 now equals 'Task 1' and arg2 now equals 'Task 2'
    let arg3 = arg1 + ' and ' + arg2;
    callback(null, arg3);
  },
  function(arg1, callback) {
                                                  // arg1 now equals 'Task1 and Task2'
    arg1 += ' completed';
    callback(null, arg1);
  }
], function(err, result) {                        // result now equals to 'Task1 and Task2 completed'
  console.log(result);
});

// 2 , with named functions
async.waterfall([
  myFirstFunction,
  mySecondFunction,
  myLastFunction,
], function(err, result) {                       // result now equals 'Task1 and Task2 completed'
  console.log(result);
});

function myFirstFunction(callback) {
  callback(null, 'Task 1', 'Task 2');
}
function mySecondFunction(arg1, arg2, callback) {
                                                // arg1 now equals 'Task 1' and arg2 now equals 'Task 2'
  let arg3 = arg1 + ' and ' + arg2;
  callback(null, arg3);
}
function myLastFunction(arg1, callback) {
                                                // arg1 now equals 'Task1 and Task2'
  arg1 += ' completed';
  callback(null, arg1);
}


4. Async.queue
---------------
When we need to run a set of tasks asynchronously, a queue can be used.
A queue object based on an asynchronous function can be created which is passed as a worker.

  Syntax      : async.queue(task, concurrency)
> task        : Here, it takes two parameters, first — the task to be performed and second — the callback function.
> concurrency : It is the number of functions to be run in parallel.

  async.queue returns a queue object that supports few properties:
   > push    : Adds tasks to the queue to be processed.
   > drain   : The drain function is called after the last task of the queue.
   > unshift : Adds tasks in front of the queue.
   
Example:
// 1
                                                    // create a queue object with concurrency 2
var q = async.queue(function(task, callback) {
  console.log('Hello ' + task.name);
  callback();
}, 2);

                                                    // assign a callback
q.drain = function() {
  console.log('All items have been processed');
};

                                                   // add some items to the queue
q.push({name: 'foo'}, function(err) {
  console.log('Finished processing foo');
});

q.push({name: 'bar'}, function (err) {
  console.log('Finished processing bar');
});

                                                 // add some items to the queue (batch-wise)
q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
  console.log('Finished processing item');
});

                                                // add some items to the front of the queue
q.unshift({name: 'bar'}, function (err) {
  console.log('Finished processing bar');
});


5. Async.priorityQueue
-----------------------
It is the same as the queue,
the only difference being that a PRIORITY can be assigned to the tasks which are considered in ascending order.

   Syntax : async.priorityQueue(task,concurrency)
 > task   : it takes three parameters:
           the task to be performed,
           priority,
             (it is a number that determines the sequence of execution. 
              For an array of tasks, the priority remains the same for all of them.)
           callback function
           
NOTE : The async.priorityQueue does not support ‘unshift’ property of the queue.

Example:
                                                       // create a queue object with concurrency 1
var q = async.priorityQueue(function(task, callback) {
  console.log('Hello ' + task.name);
  callback();
}, 1);

                                                      // assign a callback
q.drain = function() {
  console.log('All items have been processed');
};

                                                    // add some items to the queue with priority
q.push({name: 'foo'}, 3, function(err) {
  console.log('Finished processing foo');
});

q.push({name: 'bar'}, 2, function (err) {
  console.log('Finished processing bar');
});

                                                 // add some items to the queue (batch-wise) which will have same priority
q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], 1, function(err) {
  console.log('Finished processing item');
});


6. Async.race
--------------
It runs all the tasks in parallel, 
but as soon as any of the function completes its execution or passes an error to its callback, 
the main callback is immediately called.

  Syntax   : async.race(tasks, callback)
 > task    : Here, it is a collection of functions to run. It is an array or any iterable.
 > callback: The result of the first complete execution is passed. It may be the result or error.
 
Example:
async.race([
  function (callback) {
    setTimeout(function () {
      callback(null, 'one');
    }, 300);
  },
  function (callback) {
    setTimeout(function () {
      callback(null, 'two');
    }, 100);
  },
  function (callback) {
    setTimeout(function () {
      callback(null, 'three');
    }, 200);
  }
],
                                                 // main callback
  function (err, result) {               // the result will be equal to 'two' as it finishes earlier than the other 2
    console.log('The result is ', result);
  });
  
  
NOTE : Combining Async Flows
-----------------------------
Yes, it's possible. the async flows like parallel and series can be combined and nested.



MODULES
--------
.. Builtin modules   (fs, http,   etc...)
.. Project modules   (user created)
.. Public  modules   (npm)

.. These are exported and used in another file
   var modulename = require('./module_to_be_exported')      // "require" is similar to import
   

 CLUSTER module
 ================
 REFERENCE       : https://medium.com/tech-tajawal/clustering-in-nodejs-utilizing-multiple-processor-cores-75d78aeb0f4f
 for code example
 
 A single instance of Node.js runs in a single thread. 
 To take advantage of multi-core systems, the user will want to launch a cluster of Node.js processes to handle the load.
    eg:- cluster.fork();
 
 “Cluster” was introduced to scale an application execution on multiple processor cores by creating worker processes.
 Worker processes share a single port, therefore, requests are routed through a shared port.
 
 In case any spawned process dies in an unplanned or planned manner
 then a new process can be started instantly as a replacement to killed one without any delay or manual interruption.
 
 All available cores can be utilized for application execution, increases application performance.
 
 Resources wastage reduced tremendously by using maximum capacity of the processor.
 
 Easy to implement since all work is managed by NodeJs module and no need to introduce an additional dependency.
 
 
 Worker_Threads module
 ======================
 The worker_threads module enables the use of threads with message channels between them. 
 Workers (threads) are useful for performing CPU-intensive JavaScript operations.
 They will not help much with I/O-intensive work.
 Node.js’s built-in asynchronous I/O operations are more efficient than Workers can be.




EVENT EMITTER
--------------
.. Publisher emits EVENT using "emit" and Subscriber subscribes for EVENT using "on"
.. Builtin EVENTEmitter
.. Project modules/User Created



STREAMS
---------
Stream are instances of event emitter. These can be read, write, OR both
. For Small files read
.. "pipe" to other when read from another

. For Large files , read in chunks
.. "readable" and "end" are builtin for readstream

. For Syncronous file read ie untill not read the file it will not go to next line
.. This is referred as blocking code execution
.. fs (FileSystem)
.. fs.readFileSync            // readFileSyncronously
.. fs.statSync                // stats of file like size, .... etc..

.     Asyncronous file read : DEFAULT behaviour of node
.. fs.stat



PROCESS MODULE
---------------
.. process.pid
.. process.cwd()
.. process.version     .... etc ...



OS MODULE
----------
.. os.hostname()
.. os.totalmem()
.. os.freemem()      ..... etc ....



HTTP SERVER
------------
. Server request using NODE


. Server request using EXPRESS


.. Routing   (Refer Screenshots)
...  route files added under routes folder

.. Dynamic routing
   - 1. PATH PARAMS
     - marked with colon (:)
     - read using `req.params.PARAM`
     - Example
       router.get('/user/:PARAM', function (req, res) {
          console.log(req.params.PARAM);
       })
       
   - 2. QUERY PARAMS
     - read using `req.query.QPARAM`
     - Example
       // GET REQUEST  ==> /user?order=desc+order&shoe[color]=blue&shoe[type]=converse
       router.get('/user', function (req, res) {
          console.log(req.query.order);               // "desc order"
          console.log(req.query.shoe.type);           // "converse"
       })
       
   - 3. HTTP HEADER
     - read using `req.get(field)`  OR  `req.header(field)`    with case-insensitive match.
     - sent using `res.set(field, value | [value1, value2])`  OR  res.header(field, value | [value1, value2])  OR  `res.append(field, value | [value1, value2])`
       NOTE : res.set()  OR  res.header() will reset the previously-set header value.
              res.append() will append specified value to HTTP response header field. 
              If the header is not already set, it creates the header with the specified value.
     - Example
       router.get('/user', function (req, res) {
          console.log(req.get('Content-Type'));           // "text/plain"
          console.log(req.get('content-type'));           // "text/plain"
          
          res.set({
           'Content-Type': 'text/plain',
           'Content-Length': '123'
          });
          res.append('Warning', '199 Miscellaneous warning');
          res.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);
       })
   
   - 4. HTTP BODY
     - read using `req.body.KEY`
     - sent using `res.json(HTTP_BODY)`  OR  `res.send(HTTP_BODY)`
     - Example
       router.post('/profile', function (req, res, next) {
          console.log(req.body.KEY);
          
          res.json({username: 'kapoor-rakshit', github: 'yes'});
       })
       

.. ENV CONFIG
...  variables inited during run for program to behave accordingly.
...  On windows : set CONFIG_VAR=development                        // set env variable , NOTE : no space , no "quotes" please :)
                  node filename.js                                  // run your file



.. HTML rendered VIEW

     INDEX.js  --->  routes/COMPONENT.js  --->  templates/VIEW.jade

...  Using JADE template VIEW engine (now known as PUG)  ,  install using   "npm install jade"
...  define 'view engine' , 'views'    etc...
...  .jade file uses indentation and use   '|'   for breaking code into mulltiple lines
...   pass data from .js to .jade using  #{var}  in  .jade   and   .render("", {var : value}) in routes/.js


.. BODY-PARSER  for  working with FORM data
...  "npm install body-parser"
...  set 'views' , 'view engine'
...  use 'bodyParser.json()' , 'bodyParser.urlencoded({extended : false})'
...  'router.post'  for  submitting form data    NOTE : This address must be same as form action attribute value as specified in .jade


.. STYLING
...  use 'express.static()'




.. COOKIES and SESSIONS
...  cookies are identifiers to tell server that request is coming from a client that is earlier encountered too.
     This is important as http is stateless protocol.  It is stored at CLIENT side.

...  sessions are duration of activity tracked by server. stored at SERVER side.

...  "npm install cookie-parser"
     "npm install express-session"

...  check status on storage tab of BROWSERs INSPECTOR window.




.. APP.LOCALS
.. // This provides value to variables in all .jade files coz inited in index.js with app.locals

...  app.locals.VARNAME = {var1 : val1 , var2 : val2}
...  app.locals.VARNAME = "VALUE"



.. ERROR HANDLING
...  If error not handled in code , ERROR will be prompted at CLIENT side.
...  define functions for handling error  and  make   app.use(funcname);

 
